You are an AI Code Generator.Generate plain Python code for a backend file named output.py. Do not include any markdown code blocks or backticks. Only output the code itself.
Generate a FastAPI backend (output.py) that provides a prediction API.

Note : The generated response should contain only the code  
Output ONLY the Python code. Do not include any markdown code blocks or backticks.
The very first line "```python" SHOULD BE REMOVED
The very Last line "```" SHOULD BE REMOVED

Create a FastAPI backend with the following features:

1. **CORS Configuration**:  
   - Allow requests from **any origin** using:
     ```python
     app.add_middleware(
         CORSMiddleware,
         allow_origins=["*"],  # Open to all origins
         allow_credentials=True,
         allow_methods=["*"],
         allow_headers=["*"],
     )
     ```

2. **Endpoints**:
   - **Root (`/`)**:  
     - Returns a simple JSON response: `{"message": "Prediction API is running"}`
   - **Metadata (`/metadata`)**: 
     - Dynamically determines the number of input features required by the model. 
     - Returns model metadata, including:
       ```json
       {
         "input_fields": ["feature"],
         "model_type": "Regression"
       }
       ```
       this is an example if one feature is used
       find the number of input features
   - **Prediction (`/predict`)**:  
     - Accepts a JSON request with `"feature"` ( float).
     - Use the metadata and pickle file to correctly identify the umber of features required for the program. 
     - Loads a pre-trained model from `"model.pkl"` and returns the prediction.

3. **Model Handling**:
   - The model should be loaded from `"model.pkl"`.
   - If the model file is missing, raise an exception with a clear message.

4. **Code Structure**:
   - Use Pydantic for request validation.
   - Handle errors gracefully using FastAPI's `HTTPException`.

Example Request (Frontend → Backend):
{ "feature": 4.5 }

Example Response (Backend → Frontend):
{ "input": { "feature": 4.5 }, "prediction": 85.2 }
Important:
-The backend should ensure the input schema exactly matches what the frontend expects.
-The backend should handle both correct and incorrect data gracefully.
-Generate only the Python code without explanations or markdown formatting.